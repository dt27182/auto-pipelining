`ifndef RISCV_INST_VH
`define RISCV_INST_VH

//--------------------------------------------------------------------
// Instruction opcodes
//--------------------------------------------------------------------

`define NOP        (`ADDI & 32'b00000_00000_000000000000_111_1111111) // nop is addiw $x0, $x0, $x0

/* Automatically generated by parse-opcodes */
`define J          32'b?????????????????????????_1100111
`define JAL        32'b?????????????????????????_1101111
`define JALR_C     32'b?????_?????_????????????_000_1101011
`define JALR_R     32'b?????_?????_????????????_001_1101011
`define JALR_J     32'b?????_?????_????????????_010_1101011
`define BEQ        32'b?????_?????_?????_???????_000_1100011
`define BNE        32'b?????_?????_?????_???????_001_1100011
`define BLT        32'b?????_?????_?????_???????_100_1100011
`define BGE        32'b?????_?????_?????_???????_101_1100011
`define BLTU       32'b?????_?????_?????_???????_110_1100011
`define BGEU       32'b?????_?????_?????_???????_111_1100011
`define LUI        32'b?????_????????????????????_0110111
`define ADDI       32'b?????_?????_????????????_000_0010011
`define SLLI       32'b?????_?????_000000_??????_001_0010011
`define SLTI       32'b?????_?????_????????????_010_0010011
`define SLTIU      32'b?????_?????_????????????_011_0010011
`define XORI       32'b?????_?????_????????????_100_0010011
`define SRLI       32'b?????_?????_000000_??????_101_0010011
`define SRAI       32'b?????_?????_000001_??????_101_0010011
`define ORI        32'b?????_?????_????????????_110_0010011
`define ANDI       32'b?????_?????_????????????_111_0010011
`define ADD        32'b?????_?????_?????_0000000000_0110011
`define SUB        32'b?????_?????_?????_1000000000_0110011
`define SLL        32'b?????_?????_?????_0000000001_0110011
`define SLT        32'b?????_?????_?????_0000000010_0110011
`define SLTU       32'b?????_?????_?????_0000000011_0110011
`define XOR        32'b?????_?????_?????_0000000100_0110011
`define SRL        32'b?????_?????_?????_0000000101_0110011
`define SRA        32'b?????_?????_?????_1000000101_0110011
`define OR         32'b?????_?????_?????_0000000110_0110011
`define AND        32'b?????_?????_?????_0000000111_0110011
`define LW         32'b?????_?????_????????????_010_0000011
`define SW         32'b?????_?????_?????_???????_010_0100011
`define MFPCR      32'b?????_00000_?????_0000000010_1111011
`define MTPCR      32'b00000_?????_?????_0000000011_1111011



//--------------------------------------------------------------------
// Instruction bundle
//--------------------------------------------------------------------

`define INST_OPCODE    31:25
`define INST_OPCODE5   31:27
`define INST_RA        24:20
`define INST_RB        19:15
`define INST_RC        4:0
`define INST_SHAMT     5:0
`define INST_IMM       11:0
`define INST_IMM_SIGN  15
`define INST_BIGIMM    19:0
`define INST_TARGET    26:0

module unpackInst
(
  input [31:0] inst
);

  wire [4:0] ra = inst[`INST_RA];
  wire [4:0] rb = inst[`INST_RB];
  wire [4:0] rc = inst[`INST_RC];
  wire [5:0] shamt = inst[`INST_SHAMT];
  wire [11:0] imm = inst[`INST_IMM];
  wire [26:0] target = inst[`INST_TARGET];

endmodule

//--------------------------------------------------------------------
// Instruction disassembly
//--------------------------------------------------------------------

`ifndef SYNTHESIS

// make sure to change disasm-modelsim.cc if you change argument sizes
`ifdef VCS
extern "A" void riscv_disasm
(
  input  reg  [31:0] insn,
  output reg [255:0] dasm,
  output reg  [47:0] minidasm
);
`else // MODEL_TECH
task riscv_disasm
(
  input  reg  [31:0] insn,
  output reg [255:0] dasm,
  output reg  [47:0] minidasm
);
  dasm = 256'd0;
  minidasm = 48'd0;
endtask
`endif

module disasmInst
(
  input [31:0] inst
);

  reg [255:0] dasm;
  reg [47:0] minidasm;

  always @(inst)
  begin
    if (inst === 32'bx) begin
      $sformat(dasm,     "x                    ");
      $sformat(minidasm, "x    ");
    end
    else
      riscv_disasm(inst, dasm, minidasm);
  end
endmodule

module printInst
(
  input clk,
  input [31:0] inst,
  input log_control
);

  reg [255:0] dasm;
  reg [47:0] minidasm;

  always @(inst)
    riscv_disasm(inst, dasm, minidasm);

  always @(posedge clk)
  begin
    if (log_control)
      $display("INST: %s", minidasm);
  end

endmodule
`endif
`endif
